{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Address parser \u00b6 Simple address parser with localization support. Note: This library is meant to be simple, light weight and easy to adapt. This is not the best and most optimized address parser out there. For state of the art parser you should probably look at https://github.com/openvenues/pypostal Documentation: https://gispocoding.github.io/addr-parser GitHub: https://github.com/gispocoding/addr-parser PyPI: https://pypi.org/project/addrparser/ Free software: MIT Supported countries \u00b6 Country Description Documentation Suomi - Finland Suomalaisten osoitteiden osoiteparseri https://gispocoding.github.io/addr-parser/locales/fi Installation \u00b6 pip install addrparser Setting up a development environment \u00b6 See instructions in CONTRIBUTING.md Usage \u00b6 Command line tool \u00b6 $ addr-parse --help Usage: addr-parse [ OPTIONS ] ADDRESS Cli tool for parsing text addresses. Args: address ( str ) : address text Options: -l, --locale TEXT Country code in two-letter ISO 3166 --help Show this message and exit. $ addr-parser \"Iso Maantie 12b B 7\" { \"input\" : \"Iso Maantie 12b B 7\" , \"result\" : { \"street_name\" : \"Iso Maantie\" , \"house_number\" : \"12b\" , \"entrance\" : \"B\" , \"apartment\" : \"7\" } } Library \u00b6 >>> from addrparser import AddressParser >>> parser = AddressParser ( 'fi' ) >>> address = parser . parse ( 'Iso Maantie 12b B 7' ) >>> address Address ( street_name = 'Iso Maantie' , house_number = '12b' , entrance = 'B' , apartment = '7' , post_office_box = None , zip_number = None , zip_name = None ) Credits \u00b6 This project was created with inspiration from waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#address-parser","text":"Simple address parser with localization support. Note: This library is meant to be simple, light weight and easy to adapt. This is not the best and most optimized address parser out there. For state of the art parser you should probably look at https://github.com/openvenues/pypostal Documentation: https://gispocoding.github.io/addr-parser GitHub: https://github.com/gispocoding/addr-parser PyPI: https://pypi.org/project/addrparser/ Free software: MIT","title":"Address parser"},{"location":"#supported-countries","text":"Country Description Documentation Suomi - Finland Suomalaisten osoitteiden osoiteparseri https://gispocoding.github.io/addr-parser/locales/fi","title":"Supported countries"},{"location":"#installation","text":"pip install addrparser","title":"Installation"},{"location":"#setting-up-a-development-environment","text":"See instructions in CONTRIBUTING.md","title":"Setting up a development environment"},{"location":"#usage","text":"","title":"Usage"},{"location":"#command-line-tool","text":"$ addr-parse --help Usage: addr-parse [ OPTIONS ] ADDRESS Cli tool for parsing text addresses. Args: address ( str ) : address text Options: -l, --locale TEXT Country code in two-letter ISO 3166 --help Show this message and exit. $ addr-parser \"Iso Maantie 12b B 7\" { \"input\" : \"Iso Maantie 12b B 7\" , \"result\" : { \"street_name\" : \"Iso Maantie\" , \"house_number\" : \"12b\" , \"entrance\" : \"B\" , \"apartment\" : \"7\" } }","title":"Command line tool"},{"location":"#library","text":">>> from addrparser import AddressParser >>> parser = AddressParser ( 'fi' ) >>> address = parser . parse ( 'Iso Maantie 12b B 7' ) >>> address Address ( street_name = 'Iso Maantie' , house_number = '12b' , entrance = 'B' , apartment = '7' , post_office_box = None , zip_number = None , zip_name = None )","title":"Library"},{"location":"#credits","text":"This project was created with inspiration from waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for Address Parser. Address dataclass \u00b6 Structured Address info. Source code in addrparser/__init__.py 13 14 15 16 17 18 19 20 21 22 23 @dataclass class Address : \"\"\"Structured Address info.\"\"\" street_name : Optional [ str ] = None house_number : Optional [ str ] = None entrance : Optional [ str ] = None apartment : Optional [ str ] = None post_office_box : Optional [ str ] = None zip_number : Optional [ str ] = None zip_name : Optional [ str ] = None AddressParser \u00b6 Class Source code in addrparser/parser.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class AddressParser : \"\"\"Class\"\"\" def __init__ ( self , locale : str ) -> None : \"\"\"_summary_ Args: locale (str): _description_ Raises: ValueError: _description_ \"\"\" try : self . _parser_module = _get_locale_module ( locale ) except ImportError : raise ValueError ( f \"No such locale ' { locale } '\" ) def parse ( self , address : str ) -> \"Address\" : \"\"\"Proxy function to localized parse functions. Localized parse functions parses an address in text format and returns a structured Address named tuple. Args: address (str): Address in text to be parsed Raises: AddressParseException: Raises a AddressParseException if the address is invalid Returns: Address: Named tuple containing structured address info \"\"\" return self . _parser_module . parse ( address ) __init__ ( locale ) \u00b6 summary Parameters: Name Type Description Default locale str description required Raises: Type Description ValueError description Source code in addrparser/parser.py 23 24 25 26 27 28 29 30 31 32 33 34 35 def __init__ ( self , locale : str ) -> None : \"\"\"_summary_ Args: locale (str): _description_ Raises: ValueError: _description_ \"\"\" try : self . _parser_module = _get_locale_module ( locale ) except ImportError : raise ValueError ( f \"No such locale ' { locale } '\" ) parse ( address ) \u00b6 Proxy function to localized parse functions. Localized parse functions parses an address in text format and returns a structured Address named tuple. Parameters: Name Type Description Default address str Address in text to be parsed required Raises: Type Description AddressParseException Raises a AddressParseException if the address is invalid Returns: Name Type Description Address 'Address' Named tuple containing structured address info Source code in addrparser/parser.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def parse ( self , address : str ) -> \"Address\" : \"\"\"Proxy function to localized parse functions. Localized parse functions parses an address in text format and returns a structured Address named tuple. Args: address (str): Address in text to be parsed Raises: AddressParseException: Raises a AddressParseException if the address is invalid Returns: Address: Named tuple containing structured address info \"\"\" return self . _parser_module . parse ( address )","title":"Modules"},{"location":"api/#addrparser.Address","text":"Structured Address info. Source code in addrparser/__init__.py 13 14 15 16 17 18 19 20 21 22 23 @dataclass class Address : \"\"\"Structured Address info.\"\"\" street_name : Optional [ str ] = None house_number : Optional [ str ] = None entrance : Optional [ str ] = None apartment : Optional [ str ] = None post_office_box : Optional [ str ] = None zip_number : Optional [ str ] = None zip_name : Optional [ str ] = None","title":"Address"},{"location":"api/#addrparser.AddressParser","text":"Class Source code in addrparser/parser.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class AddressParser : \"\"\"Class\"\"\" def __init__ ( self , locale : str ) -> None : \"\"\"_summary_ Args: locale (str): _description_ Raises: ValueError: _description_ \"\"\" try : self . _parser_module = _get_locale_module ( locale ) except ImportError : raise ValueError ( f \"No such locale ' { locale } '\" ) def parse ( self , address : str ) -> \"Address\" : \"\"\"Proxy function to localized parse functions. Localized parse functions parses an address in text format and returns a structured Address named tuple. Args: address (str): Address in text to be parsed Raises: AddressParseException: Raises a AddressParseException if the address is invalid Returns: Address: Named tuple containing structured address info \"\"\" return self . _parser_module . parse ( address )","title":"AddressParser"},{"location":"api/#addrparser.parser.AddressParser.__init__","text":"summary Parameters: Name Type Description Default locale str description required Raises: Type Description ValueError description Source code in addrparser/parser.py 23 24 25 26 27 28 29 30 31 32 33 34 35 def __init__ ( self , locale : str ) -> None : \"\"\"_summary_ Args: locale (str): _description_ Raises: ValueError: _description_ \"\"\" try : self . _parser_module = _get_locale_module ( locale ) except ImportError : raise ValueError ( f \"No such locale ' { locale } '\" )","title":"__init__()"},{"location":"api/#addrparser.parser.AddressParser.parse","text":"Proxy function to localized parse functions. Localized parse functions parses an address in text format and returns a structured Address named tuple. Parameters: Name Type Description Default address str Address in text to be parsed required Raises: Type Description AddressParseException Raises a AddressParseException if the address is invalid Returns: Name Type Description Address 'Address' Named tuple containing structured address info Source code in addrparser/parser.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def parse ( self , address : str ) -> \"Address\" : \"\"\"Proxy function to localized parse functions. Localized parse functions parses an address in text format and returns a structured Address named tuple. Args: address (str): Address in text to be parsed Raises: AddressParseException: Raises a AddressParseException if the address is invalid Returns: Address: Named tuple containing structured address info \"\"\" return self . _parser_module . parse ( address )","title":"parse()"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] \u00b6 [0.2.0] (2022-09-19) \u00b6 Added \u00b6 Add support for python 3.6. I know this is stupid! So are customers legacy systems. [0.1.0] (2022-06-20) \u00b6 Added \u00b6 Support for Finnish addresses First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#020-2022-09-19","text":"","title":"[0.2.0] (2022-09-19)"},{"location":"changelog/#added","text":"Add support for python 3.6. I know this is stupid! So are customers legacy systems.","title":"Added"},{"location":"changelog/#010-2022-06-20","text":"","title":"[0.1.0] (2022-06-20)"},{"location":"changelog/#added_1","text":"Support for Finnish addresses First release on PyPI.","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/gispocoding/addr-parser/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Address Parser could always use more documentation, whether as part of the official Address Parser docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/gispocoding/addr-parser/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up addr-parser for local development. Fork the addr-parser repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/addr-parser.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and 3.10. Check https://github.com/gispocoding/addr-parser/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_addrparser.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/gispocoding/addr-parser/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Address Parser could always use more documentation, whether as part of the official Address Parser docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/gispocoding/addr-parser/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up addr-parser for local development. Fork the addr-parser repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/addr-parser.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and 3.10. Check https://github.com/gispocoding/addr-parser/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_addrparser.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Address Parser, run this command in your terminal: $ pip install addrparser This is the preferred method to install Address Parser, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Address Parser can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/gispocoding/addr-parser Or download the tarball : $ curl -OJL https://github.com/gispocoding/addr-parser/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Address Parser, run this command in your terminal: $ pip install addrparser This is the preferred method to install Address Parser, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Address Parser can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/gispocoding/addr-parser Or download the tarball : $ curl -OJL https://github.com/gispocoding/addr-parser/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Address Parser in a project from addrparser import","title":"Usage"},{"location":"usage/#usage","text":"To use Address Parser in a project from addrparser import","title":"Usage"},{"location":"locales/fi/","text":"Osoiteparseri \u00b6 T\u00e4m\u00e4 osoiteparseri tukee valideja nykymuotoisia suomalaisia osoitteita. Esimerkin tapauksessa: Iso Maantie 12b B 7 65220 Vaasa Osa Attribuutin nimi Selite Esimerkin arvo Muita mahdollisia arvoja Osoitenimi street_name Tien, kadun tai aukion nimi tai muu sovittu nimi Iso Maantie Vasikkasaari Osoitenumero house_number Osoitenimeen liitett\u00e4v\u00e4 numero ja mahdollinen jakokirjain 12b 7, 12-14 Porraskirjain entrance Porrashuoneen yksil\u00f6iv\u00e4, osoitenumeroon liitett\u00e4v\u00e4 kirjain B A, C Huoneistonumero apartment Huoneiston yksil\u00f6iv\u00e4 numero ja mahdollinen jakokirjain 7 1, 12a Postilokero post_office_box Postinlajittelussa k\u00e4ytetty tunnus, jolla posti jaellaan asiakkaan postilokeroon PL154 Postinumero zip_number Postinlajittelussa k\u00e4ytetty numeromuotoinen aluetunnus 65220 02200, 65100 Postitoimipaikka zip_name Postinlajittelussa k\u00e4ytetty lajittelualueen nimi Vaasa Espoo","title":"FI"},{"location":"locales/fi/#osoiteparseri","text":"T\u00e4m\u00e4 osoiteparseri tukee valideja nykymuotoisia suomalaisia osoitteita. Esimerkin tapauksessa: Iso Maantie 12b B 7 65220 Vaasa Osa Attribuutin nimi Selite Esimerkin arvo Muita mahdollisia arvoja Osoitenimi street_name Tien, kadun tai aukion nimi tai muu sovittu nimi Iso Maantie Vasikkasaari Osoitenumero house_number Osoitenimeen liitett\u00e4v\u00e4 numero ja mahdollinen jakokirjain 12b 7, 12-14 Porraskirjain entrance Porrashuoneen yksil\u00f6iv\u00e4, osoitenumeroon liitett\u00e4v\u00e4 kirjain B A, C Huoneistonumero apartment Huoneiston yksil\u00f6iv\u00e4 numero ja mahdollinen jakokirjain 7 1, 12a Postilokero post_office_box Postinlajittelussa k\u00e4ytetty tunnus, jolla posti jaellaan asiakkaan postilokeroon PL154 Postinumero zip_number Postinlajittelussa k\u00e4ytetty numeromuotoinen aluetunnus 65220 02200, 65100 Postitoimipaikka zip_name Postinlajittelussa k\u00e4ytetty lajittelualueen nimi Vaasa Espoo","title":"Osoiteparseri"}]}